# github repository Actions 페이지에 나타낼 이름
name: CI/CD

# 이벤트 트리거가 발동될 브랜치
on:
  push:
    branches: 
      - main
      - develop

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    
    ## JDK 설정
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin' # https://github.com/actions/setup-java
    
    ## gradle 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties')}}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    ## application-dev.properties 생성하기
    - name: make application-dev.properties
      if: contains(github.ref, 'develop')
      run: |
        cd ./src/main/resources
        touch ./application-dev.properties
        echo "${{ secrets.PROPERTIES_DEV}}" > ./application-dev.properties
      shell: bash
    
    ## application-prod.properties 생성하기
    - name: make application-prod.properties
      if: contains(github.ref, 'main')
      run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
      shell: bash
    
    ## gradle 빌드
    - name: Build with Gradle
      run: ./gradlew build -x test # 테스트 작업을 제외하고 빌드를 수행합니다.
      
    ## docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/cafe-prod .
          docker push ${{ secrets.DOCKER_REPO }}/cafe-prod
    
    ## docker build & push to production
    - name: Docker build & push to dev
      if: contains(github.ref, 'develop')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/cafe-dev .
          docker push ${{ secrets.DOCKER_REPO }}/cafe-dev
    
    ## production에 배포
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO }}/cafe-prod
              docker-compose up -d
              docker image prune -f # docker image prune : 사용된적이 없는 이미지 삭제, -f : 물어보지 않고 바로 삭제
    
    ## develop에 배포
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          #key: ${{ secrets.PRIVATE_KEY }}
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO }}/cafe-dev
              docker-compose up -d
              docker image prune -f # docker image prune : 사용된적이 없는 이미지 삭제, -f : 물어보지 않고 바로 삭제

##  time  
current-time:
  needs: CI-CD
  runs-on: ubuntu-latest
  steps:
    - name: Get Current Time
      uses: 1466587594/get-current-time@v2
      id: current-time
      with:
        format: YYYY-MM-DDTHH:mm:ss
        utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가
  
    - name: Print Current Time
      run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
      shell: bash
      
