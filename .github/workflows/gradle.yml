# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "네모네모", "main", "dev" ]
  pull_request:
    branches: [ "네모네모", "main", "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    ## JDK 설정
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # application-prod.yml 파일을 생성하여 설정 
    - name: make application-prod.yml
      run: |
        cd ./src/main/resources
        touch ./application-prod.yml
        echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
    
    # gradlew 실행을 위해서 실행 권한을 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # Gradle을 이용하여 빌드 수행
    - name: Build with Gradle
      run: ./gradlew build -x test
    
    # 도커 이미지 빌드하여 도커 허브에 푸시하기
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t app .
        docker tag app ${{ secrets.DOCKER_USERNAME}}/be-java-cafe-max:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/be-java-cafe-max:latest
    
    # 배포
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        # 도커 작업
        script: |
          sudo chmod 666 /var/run/docker.sock
          docker pull ${{ secrets.DOCKER_USERNAME }}/be-java-cafe-max:latest
          docker stop $(docker ps -a -q)
          docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/be-java-cafe-max:latest
          docker rm $(docker ps --filter 'status=exited' -a -q)
          docker image prune -a -f
        
